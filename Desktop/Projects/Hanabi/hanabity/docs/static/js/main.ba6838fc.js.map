{"version":3,"file":"static/js/main.ba6838fc.js","mappings":"gKAIe,SAASA,GAAsB,YAACC,EAAW,cAAEC,EAAa,aAAEC,IACzE,MAAOC,EAAOC,IAAYC,EAAAA,EAAAA,UAASL,IAC5BM,EAAOC,IAAYF,EAAAA,EAAAA,UAASJ,GASnC,SAASO,EAA0BC,GACjC,OAAQA,GACN,IAAK,MACH,MAAO,UACT,IAAK,QACH,MAAO,UACT,IAAK,OACH,MAAO,UACT,IAAK,SACH,MAAO,UACT,QACE,MAAO,UAEb,CACA,SAASC,EAA4BD,GACnC,OAAQA,GACN,IAAK,MACH,MAAO,UACT,IAAK,QACH,MAAO,UACT,IAAK,OACH,MAAO,UACT,IAAK,SACH,MAAO,UACT,QACE,MAAO,UAEb,CAEA,OApCAE,EAAAA,EAAAA,YAAU,KACRJ,EAASN,KACR,CAACA,KAmCFW,EAAAA,EAAAA,KAACC,EAAAA,QAAY,CAACC,MAAOC,EAAOC,UAAUC,UACpCC,EAAAA,EAAAA,MAACC,EAAAA,QAAI,CAAAF,SAAA,EAEHL,EAAAA,EAAAA,KAACQ,EAAAA,QAAI,CAACN,MAAOC,EAAOZ,MAAMc,SAAEd,IAC3BkB,OAAOC,QAAQhB,GAAOiB,KAAI,EAAEd,EAAWe,MACtCN,EAAAA,EAAAA,MAACC,EAAAA,QAAI,CAAiBL,MAAOC,EAAOU,kBAAkBR,SAAA,EACpDL,EAAAA,EAAAA,KAACQ,EAAAA,QAAI,CAACN,MAAOC,EAAOW,SAAST,SAAER,KAC/BG,EAAAA,EAAAA,KAACO,EAAAA,QAAI,CAACL,MAAO,CACXC,EAAOY,cACP,CAAEC,gBAAiBpB,EAA0BC,KAC7CQ,SACDO,EAAeD,KAAI,CAACM,EAAMC,KACzBlB,EAAAA,EAAAA,KAACmB,EAAAA,QAAgB,CAEjBC,QAASA,IAAM9B,EAAaC,EAAM0B,EAAMpB,GACxCK,MAAO,CACLC,EAAOkB,QACP,CAAEL,gBAAiBlB,EAA4BD,KAC/CQ,UAEFL,EAAAA,EAAAA,KAACQ,EAAAA,QAAI,CAACN,MAAOC,EAAOmB,YAAaC,cAAe,EAAGC,cAAc,OAAMnB,SACpEY,KARE,GAAGpB,KAAaqB,WARdrB,MAwBbG,EAAAA,EAAAA,KAACO,EAAAA,QAAI,CAACL,MAAOC,EAAOsB,oBAI5B,CAEA,MAAM,OAAEC,GAAWC,EAAAA,QAAAA,IAAe,UAE5BxB,EAASyB,EAAAA,QAAAA,OAAkB,CAC/BxB,UAAW,CACTyB,KAAM,EACNH,OAAiB,GAATA,GAEVnC,MAAO,CACLuC,SAAU,GACVC,WAAY,OACZC,aAAc,IAEhBnB,kBAAmB,CACjBmB,aAAc,IAIhBlB,SAAU,CACRgB,SAAU,GACVC,WAAY,OACZE,UAAW,GACXD,aAAc,GAEhBP,cAAe,CACbC,OAAQ,IAEVQ,eAAgB,CACdC,cAAe,MACfC,WAAY,SACZC,IAAK,GAEPC,cAAe,CACbD,IAAK,EACLL,aAAc,GAEhBjB,cAAe,CACboB,cAAe,MACfI,SAAU,OACVC,eAAgB,aAChBH,IAAK,EACLI,QAAS,EACTC,aAAc,EACdC,YAAa,EACbC,YAAa,QAGfvB,QAAS,CACPwB,MAAO,GACPnB,OAAQ,GACRgB,aAAc,EACdF,eAAgB,SAChBJ,WAAY,SACZU,MAAO,OACPC,aAAc,CAAEF,MAAO,EAAGnB,OAAQ,GAClCsB,cAAe,GACfC,aAAc,EACdC,UAAW,GAEb5B,YAAa,CACXQ,SAAU,GACVgB,MAAO,OACPK,UAAW,SACXC,SAAU,S,cCpIC,SAASC,GAAc,IACpCC,EACAR,MAAOS,EACPC,OAAQC,EAAG,YACXC,EAAW,OACXC,EAAM,QACNC,EAAO,UACPC,IAEE,MAAOC,EAAWC,IAAgBtE,EAAAA,EAAAA,WAAS,IACpCqD,EAAOkB,IAAYvE,EAAAA,EAAAA,UAAS8D,GAAO,KACnCC,EAAQS,IAAaxE,EAAAA,EAAAA,UAASgE,GAAO,KACrCS,EAAWC,IAAgB1E,EAAAA,EAAAA,UAAS8D,GAAO,KAC3Ca,EAAYC,IAAiB5E,EAAAA,EAAAA,UAASgE,GAAO,IA0BpD,OAxBA1D,EAAAA,EAAAA,YAAU,KACNiE,EAAST,GAAO,IAChBU,EAAUR,GAAO,IACjBU,EAAaZ,GAAO,IACpBc,EAAcZ,GAAO,MACtB,CAACF,EAAKE,KAoBLnD,EAAAA,EAAAA,MAACL,EAAAA,QAAY,CAACC,MAAOC,EAAOmE,cAAcjE,SAAA,EACtCC,EAAAA,EAAAA,MAACE,EAAAA,QAAI,CAACN,MAAOC,EAAOoE,UAAUlE,SAAA,CAAC,QAAMiD,EAAM,MAC3CtD,EAAAA,EAAAA,KAACO,EAAAA,QAAI,CAACL,MAAOC,EAAOqE,YAAYnE,SAC1ByD,GA+BExD,EAAAA,EAAAA,MAAAmE,EAAAA,SAAA,CAAApE,SAAA,EACIC,EAAAA,EAAAA,MAACC,EAAAA,QAAI,CAACL,MAAOC,EAAOuE,YAAYrE,SAAA,EAC5BC,EAAAA,EAAAA,MAACC,EAAAA,QAAI,CAACL,MAAOC,EAAOwE,gBAAgBtE,SAAA,EAChCL,EAAAA,EAAAA,KAACQ,EAAAA,QAAI,CAACN,MAAOC,EAAOyE,YAAYvE,SAAC,WACjCC,EAAAA,EAAAA,MAACuE,EAAAA,QAAM,CACHC,cAAeZ,EACfhE,MAAOC,EAAO4E,OACdC,cAAeb,EAAa9D,SAAA,EAC5BL,EAAAA,EAAAA,KAAC6E,EAAAA,QAAAA,KAAW,CAACI,MAAM,eAAeC,MAAM,KACvCtB,GAASd,OAAOnC,KAAK4C,IAClBvD,EAAAA,EAAAA,KAAC6E,EAAAA,QAAAA,KAAW,CAAWI,MAAO1B,EAAK2B,MAAO3B,GAAxBA,YAK9BjD,EAAAA,EAAAA,MAACC,EAAAA,QAAI,CAACL,MAAOC,EAAOwE,gBAAgBtE,SAAA,EAChCL,EAAAA,EAAAA,KAACQ,EAAAA,QAAI,CAACN,MAAOC,EAAOyE,YAAYvE,SAAC,YACjCC,EAAAA,EAAAA,MAACuE,EAAAA,QAAM,CACHC,cAAeV,EACflE,MAAOC,EAAO4E,OACdC,cAAeX,EAAchE,SAAA,EAC7BL,EAAAA,EAAAA,KAAC6E,EAAAA,QAAAA,KAAW,CAACI,MAAM,gBAAgBC,MAAM,KACxCtB,GAASJ,QAAQ7C,KAAK8C,IACnBzD,EAAAA,EAAAA,KAAC6E,EAAAA,QAAAA,KAAW,CAAWI,MAAOE,OAAO1B,GAAMyB,MAAOC,OAAO1B,IAAvCA,eAKlCnD,EAAAA,EAAAA,MAACC,EAAAA,QAAI,CAACL,MAAOC,EAAOiF,UAAU/E,SAAA,EAC1BL,EAAAA,EAAAA,KAACmB,EAAAA,QAAgB,CACbjB,MAAO,CAACC,EAAOkF,aAAclF,EAAOmF,cACpClE,QA5E5B,WACI+C,EAAarB,GAAS,IACtBuB,EAAcb,GAAU,IACxBO,GAAa,EACjB,EAwEkD1D,UAEtBL,EAAAA,EAAAA,KAACQ,EAAAA,QAAI,CAACN,MAAOC,EAAOoF,WAAWlF,SAAC,cAEpCL,EAAAA,EAAAA,KAACmB,EAAAA,QAAgB,CACbjB,MAAO,CAACC,EAAOkF,aAAclF,EAAOqF,YACpCpE,QAASA,IAzFrC,SAAmBkC,EAAKmC,EAAWC,GAC/B/B,EAAOL,EAAKmC,GAAa,GAAIC,GAAc,IAC3C1B,EAASyB,GAAa,IACtBxB,EAAUyB,GAAc,IACxB3B,GAAa,EACjB,CAoF2C4B,CAAUrC,EAAKY,EAAWE,GAAY/D,UAErDL,EAAAA,EAAAA,KAACQ,EAAAA,QAAI,CAACN,MAAOC,EAAOoF,WAAWlF,SAAC,kBArE5CC,EAAAA,EAAAA,MAAAmE,EAAAA,SAAA,CAAApE,SAAA,EACIC,EAAAA,EAAAA,MAACC,EAAAA,QAAI,CAACL,MAAOC,EAAOyF,SAASvF,SAAA,EACzBC,EAAAA,EAAAA,MAACE,EAAAA,QAAI,CAACN,MAAOC,EAAO0F,SAASxF,SAAA,CAAC,iBACXyC,GAAS,qBAE5BxC,EAAAA,EAAAA,MAACE,EAAAA,QAAI,CAACN,MAAOC,EAAO0F,SAASxF,SAAA,CAAC,kBACVmD,GAAU,qBAE5BV,GAASU,SAA2BsC,IAAhBpC,IAClBpD,EAAAA,EAAAA,MAACE,EAAAA,QAAI,CAACN,MAAOC,EAAO0F,SAASxF,SAAA,CAAC,gBACW,kBAAhBqD,EAA2BA,EAAYqC,QAAQ,GAAK,IAAM,aAI3FzF,EAAAA,EAAAA,MAACC,EAAAA,QAAI,CAACL,MAAOC,EAAOiF,UAAU/E,SAAA,EAC1BL,EAAAA,EAAAA,KAACmB,EAAAA,QAAgB,CACbjB,MAAO,CAACC,EAAOkF,aAAclF,EAAO6F,YACpC5E,QAASA,IAAM2C,GAAa,GAAM1D,UAElCL,EAAAA,EAAAA,KAACQ,EAAAA,QAAI,CAACN,MAAOC,EAAOoF,WAAWlF,SAAC,iBAEpCL,EAAAA,EAAAA,KAACmB,EAAAA,QAAgB,CACbjB,MAAO,CAACC,EAAOkF,aAAclF,EAAO8F,aACpC7E,QAhC5B,WACIyC,EAAUP,EACd,EA8BiDjD,UAErBL,EAAAA,EAAAA,KAACQ,EAAAA,QAAI,CAACN,MAAOC,EAAOoF,WAAWlF,SAAC,2BAoDhE,CAEA,MAAMF,EAASyB,EAAAA,QAAAA,OAAkB,CAC7B0C,cAAe,CACXtD,gBAAiB,OACjB0B,aAAc,GACdD,QAAS,GACTyD,OAAQ,GACRrD,MAAO,IACPsD,YAAa,OACbpD,aAAc,CAAEF,MAAO,EAAGnB,OAAQ,GAClCsB,cAAe,GACfC,aAAc,EACdC,UAAW,GAEfqB,UAAW,CACPzC,SAAU,GACVC,WAAY,OACZC,aAAc,GACdc,MAAO,QAEX0B,YAAa,CACTvC,UAAW,GAEf2D,SAAU,CACN5D,aAAc,IAElB6D,SAAU,CACN/D,SAAU,GACVE,aAAc,EACdc,MAAO,QAEXsC,UAAW,CACPjD,cAAe,MACfK,eAAgB,gBAChBP,UAAW,IAEfoD,aAAc,CACV5C,QAAS,GACTC,aAAc,EACdN,WAAY,SACZgE,SAAU,KAEdJ,WAAY,CACRhF,gBAAiB,WAErBiF,YAAa,CACTjF,gBAAiB,UACjBqF,WAAY,IAEhB3B,YAAa,CACT1C,aAAc,IAElB2C,gBAAiB,CACb3C,aAAc,IAElB4C,YAAa,CACT9C,SAAU,GACVE,aAAc,EACdc,MAAO,QAEXiC,OAAQ,CACJrD,OAAQ,GACRmB,MAAO,OACP7B,gBAAiB,UACjB0B,aAAc,GAElB4C,aAAc,CACVtE,gBAAiB,WAErBwE,WAAY,CACRxE,gBAAiB,WAErBuE,WAAY,CACRzC,MAAO,QACPf,WAAY,UCxML,SAASuE,GAAkB,KAAEC,EAAI,QAAE3C,EAAO,iBAAE4C,IAEvD,MAAMC,EAAuBA,IAClBC,MAAMF,GAAkBG,OAAOhG,KAAI,MACtCiG,YAAa,GACbC,aAAc,GACdnD,YAAa,MAIfoD,EAAsBA,IACjBJ,MAAMF,GAAkBG,OAAOhG,KAAI,MACtCmC,MAdY,CAASoC,MAAO,GAAI6B,OAAO,GAevCvD,OAfY,CAAS0B,MAAO,GAAI6B,OAAO,QAoBxCC,EAAYC,IAAiBxH,EAAAA,EAAAA,UAASgH,MACtCS,EAAWC,IAAgB1H,EAAAA,EAAAA,UAASqH,MACpCM,EAAaC,IAAU5H,EAAAA,EAAAA,UAAS,IAGjC6H,GAAUC,EAAAA,EAAAA,UAAQ,IACpBH,EAAYI,OAAOC,QAAO,CAACC,EAAKC,IAAUD,EAAMC,GAAO,IACvD,CAACP,KAILrH,EAAAA,EAAAA,YAAU,KACNkH,EAAcR,KACdU,EAAaL,OACd,CAACN,IAGJ,MAAMoB,EAAoBA,CAACC,EAAUC,KACjC,MAAMC,EAAS,GACf,IAAIL,EAAM,EAYV,OAVAI,EAAKhF,MAAMkF,SAAQlF,IACf,MAAMmF,EAAMH,EAAKtE,OAAO7C,KAAI6C,IACxB,MAAMmE,GAASE,EAAS/E,IAAU,IAC7BoF,QAAOC,GAAKC,SAASD,KAAOC,SAAS5E,KAAS6E,OAEnD,OADAX,GAAOC,EACAA,KAEXI,EAAOO,KAAKL,MAGT,CAACF,EAAQL,IAGda,EAAWC,IACLA,GAA4C,IAArC/H,OAAOgI,OAAOD,GAAKhB,OAAOa,OAmBvCK,EAAgBA,CAACpF,EAAKR,EAAOU,KAC/BmF,QAAQC,IAAI,mCAAoCtF,GAChDqF,QAAQC,IAAI,SAAU9F,EAAO,UAAWU,GACxCmF,QAAQC,IAAI,iBAAkB1B,EAAU5D,IAnBjBuF,EAACvF,EAAKR,EAAOU,EAAQsF,EAAMC,KAClD,IAAIC,EAAkB9B,EAAU5D,GAC5B2F,EAAgB,IAAI/B,GACxB8B,EAAgBlG,MAAQ,CACpBoC,MAAOpC,EACPiE,MAAO+B,GAEXE,EAAgBxF,OAAS,CACrB0B,MAAO1B,EAAO0F,WACdnC,MAAOgC,GAEXE,EAAc3F,GAAO0F,EAErB7B,EAAa8B,IAQbJ,CAAmBvF,EAAKR,EAAOU,GAAQ,GAAM,GAC7CmF,QAAQC,IAAI,gBAAiB1B,EAAU5D,IACvC,MAAM6F,EAAgB,IAAInC,GAC1BmC,EAAc7F,GAAO,CACjBsD,YAAa9D,EACb+D,aAAcrD,EACdE,YAAa,KAEjBuD,EAAckC,GAGdC,KAGJ,SAASvF,EAAUP,GACf,IAAI+F,EAAe,IAAInC,GACvBmC,EAAa/F,GAAO,CAChBR,MAhGY,CAASoC,MAAO,GAAI6B,OAAO,GAiGvCvD,OAjGY,CAAS0B,MAAO,GAAI6B,OAAO,IAmG3CI,EAAakC,GAGb,MAAMF,EAAgB,IAAInC,GAC1BmC,EAAc7F,GAAO,CACjBsD,YAAa,IACbC,aAAc,IACdnD,YAAa,GAEjBuD,EAAckC,GAGdC,GACJ,CAEA,MAoCME,EAAqBA,CAAChG,EAAKyE,KAC7B,MAAMiB,EAAkB9B,EAAU5D,GAClC,IAAIiG,EAAW,CACX3C,YAAa,GACbC,aAAc,GACdnD,YAAa,GAYjB,GARIsF,EAAgBlG,MAAMiE,QACtBwC,EAAS3C,YAAcoC,EAAgBlG,MAAMoC,OAE7C8D,EAAgBxF,OAAOuD,QACvBwC,EAAS1C,aAAemC,EAAgBxF,OAAO0B,SAI7C8D,EAAgBlG,MAAMiE,QAAUiC,EAAgBxF,OAAOuD,QAAUO,EAAU,EAAG,CAChF,MAAMkC,EAAa5F,EAAQd,MAAMnC,KAAI,CAACmC,EAAO2G,KAAQ,CACjD3G,QACA4G,KAAM3B,EAAO0B,GAAUhC,QAAO,CAACkC,EAAGC,IAAMD,EAAIC,GAAG,GAAKtC,MAGlDuC,EAAcjG,EAAQJ,OAAO7C,KAAI,CAAC6C,EAAQsG,KAAM,CAClDtG,SACAkG,KAAM3B,EAAON,QAAO,CAACC,EAAKO,IAAQP,EAAMO,EAAI6B,IAAS,GAAKxC,MAGxDyC,EAAWP,EAAW/B,QAAO,CAACuC,EAAKC,IACrCA,EAAKP,KAAOM,EAAIN,KAAOO,EAAOD,GAAKR,EAAW,IAC5CU,EAAYL,EAAYpC,QAAO,CAACuC,EAAKC,IACvCA,EAAKP,KAAOM,EAAIN,KAAOO,EAAOD,GAAKH,EAAY,IAEnD,GAAIE,EAASL,KAAOQ,EAAUR,MAE1B,GADKV,EAAgBlG,MAAMiE,QAAOwC,EAAS3C,YAAcmD,EAASjH,QAC7DkG,EAAgBxF,OAAOuD,MAAO,CAC/B,MAAMoD,EAjDKC,EAACrC,EAAQjF,KAChC,MAAMuH,EAAazG,EAAQd,MAAMwH,QAAQxH,GACzC,GAAIuH,EAAa,GAAKA,GAActC,EAAOM,OAAQ,MAAO,CAAE7E,OAAQ,GAAIE,YAAa,GAErF,MAAM6G,EAAiBxC,EAAOsC,GACxBG,EAAYD,EAAeD,QAAQG,KAAKT,OAAOO,IAErD,MAAO,CACH/G,OAAQI,EAAQJ,OAAOgH,IAAc,GACrC9G,YAAa6G,EAAeC,GAAalD,IAwClB8C,CAAmBrC,EAAQwB,EAAS3C,aACnD2C,EAAS1C,aAAesD,EAAO3G,MACnC,OAEKwF,EAAgBxF,OAAOuD,QAAOwC,EAAS1C,aAAeqD,EAAU1G,QAChEwF,EAAgBlG,MAAMiE,QACvBwC,EAAS3C,YAzEC8D,EAAC3C,EAAQvE,KAC/B,MAAMmH,EAAWvC,SAAS5E,GAAU,EACpC,GAAImH,EAAW,GAAKA,GAAY/G,EAAQJ,OAAO6E,OAAQ,MAAO,GAE9D,IAAIuC,EAAiB,EACjBC,EAAU,EAEd,IAAK,IAAIR,EAAa,EAAGA,EAAatC,EAAOM,OAAQgC,IAAc,CAC/D,MAAMX,EAAO3B,EAAOsC,GAAYM,GAAYrD,EACxCoC,EAAOmB,IACPA,EAAUnB,EACVkB,EAAiBP,EAEzB,CAEA,OAAOzG,EAAQd,MAAM8H,IAAmB,IA0DLF,CAAkB3C,EAAQwB,EAAS1C,eAIlE,MAAM4C,EAAW7F,EAAQd,MAAMwH,QAAQf,EAAS3C,aAC1CkD,EAASlG,EAAQJ,OAAO8G,QAAQf,EAAS1C,cAC3C4C,GAAY,GAAKK,GAAU,IAC3BP,EAAS7F,YAAc+G,KAAKK,MAAO/C,EAAO0B,GAAUK,GAAUxC,EAAW,KAEjF,CAOA,OAJI0B,EAAgBlG,MAAMiE,OAASiC,EAAgBxF,OAAOuD,QACtDwC,EAAS7F,YAAc,KAGpB6F,GAGLH,EAA2BA,KAC7B,GAAIb,EAAQhC,GAAO,OAEnB,MAAOwE,GAAanD,EAAkBrB,EAAM3C,GACtCoH,EAAgBD,EAAUpK,KAAIsH,GAAO,IAAIA,KAG/Cf,EAAUc,SAAQ,CAACiD,EAAGC,KAClB,GAAID,EAAEnI,MAAMiE,OAASkE,EAAEzH,OAAOuD,MAAO,CACjC,MAAMoE,EAAI/C,SAAS6C,EAAEzH,OAAO0B,OAAS,EAC/BkG,EAAIxH,EAAQd,MAAMwH,QAAQW,EAAEnI,MAAMoC,OACpCkG,GAAK,GAAKD,GAAK,IACfH,EAAcI,GAAGD,GAAKV,KAAKT,IAAI,EAAGgB,EAAcI,GAAGD,GAAK,GAEhE,KAIJ,MAAME,EAAU3E,MAAMF,GAAkBG,OAAOhG,KAAI,CAAC2K,EAAGJ,IAAMA,IACvDK,EAAmBP,EAAcrK,KAAIsH,GAAO,IAAIA,KAEtDoD,EAAQrD,SAAQkD,IACZ,MAAMlC,EAAkB9B,EAAUgE,GAGlC,GAAIlC,EAAgBlG,MAAMiE,OAASiC,EAAgBxF,OAAOuD,MACtD,OAIJ,MAAMyE,EAAaD,EAAiB5K,KAAIsH,GAAO,IAAIA,KAGnD,GAAIjB,EAAWkE,GAAGtE,aAAeI,EAAWkE,GAAGrE,aAAc,CACzD,MAAMsE,EAAI/C,SAASpB,EAAWkE,GAAGrE,cAAgB,EAC3CuE,EAAIxH,EAAQd,MAAMwH,QAAQtD,EAAWkE,GAAGtE,aAC1CwE,GAAK,GAAKD,GAAK,IACfK,EAAWJ,GAAGD,GAAKV,KAAKT,IAAI,EAAGwB,EAAWJ,GAAGD,GAAK,GAE1D,CAGA,MAAM5B,EAAWD,EAAmB4B,EAAGM,GAGvC,GAAIjC,EAAS3C,aAAe2C,EAAS1C,aAAc,CAC/C,MAAMsE,EAAI/C,SAASmB,EAAS1C,cAAgB,EACtCuE,EAAIxH,EAAQd,MAAMwH,QAAQf,EAAS3C,aACrCwE,GAAK,GAAKD,GAAK,IACfI,EAAiBH,GAAGD,GAAKV,KAAKT,IAAI,EAAGuB,EAAiBH,GAAGD,GAAK,GAEtE,CAGAlE,GAAcwE,IACV,MAAMtC,EAAgB,IAAIsC,GAE1B,OADAtC,EAAc+B,GAAK3B,EACZJ,QAIf9B,EAAO0D,IAgBX,OAZAhL,EAAAA,EAAAA,YAAU,KACN,GAAIwI,EAAQhC,GAGR,OAFAc,EAAO,IAnKXJ,EAAcR,UACdU,EAAaL,KAuKb,MAAOiE,GAAanD,EAAkBrB,EAAM3C,GAC5CyD,EAAO0D,GACP3B,MACD,CAAC7C,EAAM3C,EAASsD,EAAWV,KAG1BxG,EAAAA,EAAAA,KAACC,EAAAA,QAAY,CAAAI,UACTC,EAAAA,EAAAA,MAACC,EAAAA,QAAI,CAAAF,SAAA,EACDL,EAAAA,EAAAA,KAACQ,EAAAA,QAAI,CAACN,MAAOC,EAAOuL,KAAKrL,SAAC,eAC1BL,EAAAA,EAAAA,KAACO,EAAAA,QAAI,CAACL,MAAOC,EAAOwL,cAActL,UAC9BL,EAAAA,EAAAA,KAAC4L,EAAAA,QAAU,CACPC,YAAY,EACZC,gCAAgC,EAChCC,sBAAuB5L,EAAO6L,cAAc3L,SAE3C2G,EAAWrG,KAAI,CAACM,EAAMqC,KACnBtD,EAAAA,EAAAA,KAACqD,EAAa,CAEVC,IAAKA,EACLR,MAAO7B,EAAK2F,YACZpD,OAAQvC,EAAK4F,aACbnD,YAAazC,EAAKyC,YAClBC,OAAQ+E,EACR9E,QAASA,EACTC,UAAWA,GAPNP,aAerC,CAEA,MAAMnD,EAASyB,EAAAA,QAAAA,OAAkB,CAC7B8J,KAAM,CACF5J,SAAU,GACVC,WAAY,OACZC,aAAc,IAElB2J,cAAe,CACXxJ,cAAe,MACfH,aAAc,IAElBgK,cAAe,CACXC,kBAAmB,MC7E3B,MAAM9L,EAASyB,EAAAA,QAAAA,OAAkB,CAC/BxB,UAAW,CACTyB,KAAM,EACNY,QAAS,IAEXyJ,kBAAmB,CACjBlK,aAAc,IAEhBmK,WAAY,CACVhK,cAAe,MACfC,WAAY,SACZI,eAAgB,gBAChBR,aAAc,IAEhBoK,aAAc,CACZtK,SAAU,GACVC,WAAY,OACZsK,YAAa,IAEfC,qBAAsB,CACpBnK,cAAe,MACfC,WAAY,UAEdmK,YAAa,CACX7K,OAAQ,GACRmB,MAAO,GACPD,YAAa,OACbD,YAAa,EACbD,aAAc,EACdS,UAAW,SACXqJ,iBAAkB,GAEpBC,cAAe,CACb5J,MAAO,GACPnB,OAAQ,GACRV,gBAAiB,UACjB0B,aAAc,GACdF,eAAgB,SAChBJ,WAAY,UAEdsK,YAAa,CACX5K,SAAU,GACVC,WAAY,QAEd4K,UAAW,CACT7K,SAAU,GACVqB,UAAW,SACXpB,WAAY,OACZ6K,eAAgB,IAElBC,WAAY,CACVhL,KAAM,GAERmK,cAAe,CACbvK,cAAe,IAEjBV,cAAe,CACboB,cAAe,MACfK,eAAgB,gBAChBR,aAAc,OCnTlB8K,EAAAA,EAAAA,UDFe,WACb,MAAOC,EAASC,IAAcvN,EAAAA,EAAAA,UAAS,IAChCwN,EAAgBC,IAAqBzN,EAAAA,EAAAA,UAAS,GAI/C0N,EAAc,CAAC,MAAO,QAAS,OAAQ,SAAU,SACjDC,EAAY,CAChB,EAAE,EACF,EAAE,EACF,EAAE,EACF,EAAE,EACF,EAAE,GAGEtF,EAAO,CACXhF,MAAO,IAAIqK,EAAa,KACxB3J,OAAQ,IAAI/C,OAAO4M,KAAKD,GAAW,OAG9BE,EAAcC,IAAW9N,EAAAA,EAAAA,UAAS,CAAC,IACnC+N,EAAYC,IAAiBhO,EAAAA,EAAAA,UAAS,CAAC,IACvCsI,EAAQ2F,IAAajO,EAAAA,EAAAA,UAAS,IAUrC,SAASkO,EAAcC,EAAMnK,EAAKoK,GAChC,MAAMC,EAAaX,EAAY7C,QAAQsD,GACvC,IAAI3F,EAAMF,EAAO+F,GACjB7F,EAAIxE,GAAOwE,EAAIxE,GAAOoK,EACtB,IAAIE,EAAa,IAAIhG,GACrBgG,EAAWD,GAAc7F,EACzByF,EAAUK,EACZ,CAEA,SAASC,EAAUC,GAEjB,GADAtF,QAAQC,IAAI,qBACA,GAATqF,EAAe,CAChB,IAAI1H,EAAO,CAAC,EACZ,IAAIwH,EAAa,GACjB,IAAK,IAAIH,KAAQT,EAAY,CAC3B,IAAIe,EAAY,GACZjG,EAAM,GACV,IAAK,IAAIkG,KAAOf,EAAU,CACxBnF,EAAIK,KAAK8E,EAAUe,IACnB,IAAK,IAAIjD,EAAI,EAAGA,EAAIkC,EAAUe,GAAMjD,IAChCgD,EAAU5F,KAAK6F,EAErB,CACAJ,EAAWzF,KAAKL,GAChB1B,EAAKqH,GAAQM,CACf,CAGA,OAFAvF,QAAQC,IAAIrC,GACZmH,EAAUK,GACHxH,CACT,CAAK,CACHoC,QAAQC,IAAI,sBACZ,IAAIrC,EAAO,CAAC,EACZ,IAAK,IAAIqH,KAAQT,EACf5G,EAAKqH,GAAQ,GAGf,OADAjF,QAAQC,IAAIrC,GACLA,CACT,CACF,CA4BA,SAAS6H,EAAWC,EAAOC,EAAOzO,EAAW0O,EAAUC,GACrD7F,QAAQC,IAAI,cAAc/I,KAAa0O,YAAoBC,KAC3D,IAAIC,EAAYJ,EAAMxO,GAEtB4O,GADAA,EA7BF,SAAgBC,EAAKvD,GACnBxC,QAAQC,IAAI8F,GACZ,IAAIxD,EAAIwD,EAAIpE,QAAQa,GAIpB,OAHW,IAAPD,GACAwD,EAAIC,OAAOzD,EAAG,GAEXwD,CACT,CAsBcE,CAAOH,EAAWF,IACRM,MAAK,CAAClF,EAAGC,IACtBD,EAAEC,IAEX,IAAIkF,EAAYR,EAAMzO,GACtBiP,EAAUxG,KAAKiG,GACfO,EAAYA,EAAUD,MAAK,CAAClF,EAAGC,IACtBD,EAAEC,IAEK,QAAb4E,GACDb,EAAc9N,EAAW0O,EAAU,GACnChB,EAAO9M,OAAAsO,OAAC,CAAC,EACJT,EAAM,CACT,CAACzO,GAAYiP,KAGfrB,EAAahN,OAAAsO,OAAC,CAAC,EACVV,EAAM,CACT,CAACxO,GAAY4O,MAEK,SAAbD,IACPb,EAAc9N,EAAW0O,EAAU,GACnCd,EAAahN,OAAAsO,OAAC,CAAC,EACVT,EAAM,CACT,CAACzO,GAAYiP,KAEfvB,EAAO9M,OAAAsO,OAAC,CAAC,EACJV,EAAM,CACT,CAACxO,GAAY4O,KAGnB,CAGA,SAASO,EAAczP,EAAOgP,EAAW1O,GAC3B,SAATN,EACD6O,EAAWZ,EAAYF,EAAczN,EAAW0O,EAAU,QAE1DH,EAAWd,EAAcE,EAAY3N,EAAW0O,EAAU,QAE9D,CA8CA,OAlKAxO,EAAAA,EAAAA,YAAU,KACR,IAAIwG,EAAOyH,GAAU,GACjBiB,EAAQjB,GAAU,GACtBT,EAAQhH,GACRkH,EAAcwB,KACb,CAAChC,KAoJJlN,EAAAA,EAAAA,YAAU,KACR,IAAIwG,EAAOyH,GAAU,GACjBiB,EAAQjB,GAAU,GACtBT,EAAQhH,GACRkH,EAAcwB,KACb,CAAChC,KAKF3M,EAAAA,EAAAA,MAACC,EAAAA,QAAI,CAACL,MAAOC,EAAOC,UAAUC,SAAA,EAC5BL,EAAAA,EAAAA,KAACQ,EAAAA,QAAI,CAACN,MAAOC,EAAOwM,UAAUtM,SAAC,YAE/BC,EAAAA,EAAAA,MAACC,EAAAA,QAAI,CAACL,MAAOC,EAAO+L,kBAAkB7L,SAAA,EACpCC,EAAAA,EAAAA,MAACC,EAAAA,QAAI,CAACL,MAAOC,EAAOgM,WAAW9L,SAAA,EAC7BL,EAAAA,EAAAA,KAACQ,EAAAA,QAAI,CAACN,MAAOC,EAAOiM,aAAa/L,SAAC,cAClCC,EAAAA,EAAAA,MAACC,EAAAA,QAAI,CAACL,MAAOC,EAAOmM,qBAAqBjM,SAAA,EACvCL,EAAAA,EAAAA,KAACmB,EAAAA,QAAgB,CAACC,QArBH8N,IAAMlC,GAAWvB,GAAQhB,KAAKT,IAAIyB,EAAO,EAAG,KAqBdvL,MAAOC,EAAOsM,cAAcpM,UACvEL,EAAAA,EAAAA,KAACQ,EAAAA,QAAI,CAACN,MAAOC,EAAOuM,YAAYrM,SAAC,SAEnCL,EAAAA,EAAAA,KAACmP,EAAAA,QAAS,CACRjP,MAAOC,EAAOoM,YACd6C,aAAa,UACblK,MAAO6H,EAAQ7D,WACfmG,aAxDiB3D,IAC3B,MAAMjI,EAAM2E,SAASsD,IAAS,EAC9BsB,EAAWvC,KAAK6E,IAAI7E,KAAKT,IAAIvG,EAAK,GAAI,QAwD9BzD,EAAAA,EAAAA,KAACmB,EAAAA,QAAgB,CAACC,QA/BHmO,IAAMvC,GAAWvB,GAAQhB,KAAK6E,IAAI7D,EAAO,EAAG,KA+BdvL,MAAOC,EAAOsM,cAAcpM,UACvEL,EAAAA,EAAAA,KAACQ,EAAAA,QAAI,CAACN,MAAOC,EAAOuM,YAAYrM,SAAC,eAKvCC,EAAAA,EAAAA,MAACC,EAAAA,QAAI,CAACL,MAAOC,EAAOgM,WAAW9L,SAAA,EAC7BL,EAAAA,EAAAA,KAACQ,EAAAA,QAAI,CAACN,MAAOC,EAAOiM,aAAa/L,SAAC,uBAClCC,EAAAA,EAAAA,MAACC,EAAAA,QAAI,CAACL,MAAOC,EAAOmM,qBAAqBjM,SAAA,EACvCL,EAAAA,EAAAA,KAACmB,EAAAA,QAAgB,CAACC,QArCLoO,IAAMtC,GAAkBzB,GAAQhB,KAAKT,IAAIyB,EAAO,EAAG,KAqCrBvL,MAAOC,EAAOsM,cAAcpM,UACrEL,EAAAA,EAAAA,KAACQ,EAAAA,QAAI,CAACN,MAAOC,EAAOuM,YAAYrM,SAAC,SAEnCL,EAAAA,EAAAA,KAACmP,EAAAA,QAAS,CACRjP,MAAOC,EAAOoM,YACd6C,aAAa,UACblK,MAAO+H,EAAe/D,WACtBmG,aArEwB3D,IAElC,MAAMjI,EAAM2E,SAASsD,IAAS,EAGxB+D,EAAiBhF,KAAKiF,MAAM,GAAK3C,GAGjC4C,EAAWlF,KAAK6E,IAAIG,EAAgB,IAGpCG,EAAenF,KAAK6E,IAAI7E,KAAKT,IAAIvG,EAAK,GAAIkM,GAGhDzC,EAAkB0C,GAGdA,IAAiBD,GACnBhH,QAAQkH,KAAK,qCAAqCF,WAAkB5C,iBAqD9D/M,EAAAA,EAAAA,KAACmB,EAAAA,QAAgB,CAACC,QA/CL0O,IAAM5C,GAAkBzB,GAAQhB,KAAK6E,IAAI7D,EAAO,EAAG,KA+CrBvL,MAAOC,EAAOsM,cAAcpM,UACrEL,EAAAA,EAAAA,KAACQ,EAAAA,QAAI,CAACN,MAAOC,EAAOuM,YAAYrM,SAAC,kBAMzCC,EAAAA,EAAAA,MAACsL,EAAAA,QAAU,CACT1L,MAAOC,EAAO0M,WACdd,sBAAuB5L,EAAO6L,cAC9B+D,8BAA8B,EAAM1P,SAAA,EAEpCC,EAAAA,EAAAA,MAACC,EAAAA,QAAI,CAACL,MAAOC,EAAOY,cAAcV,SAAA,EAChCL,EAAAA,EAAAA,KAACb,EAAqB,CAACC,YAAa,OAAQC,cAAeiO,EAAchO,aAAc0P,KACvFhP,EAAAA,EAAAA,KAACb,EAAqB,CAACC,YAAa,QAASC,cAAemO,EAAYlO,aAAc0P,QAExFhP,EAAAA,EAAAA,KAACsG,EAAiB,CAChBC,KAAM+G,EACN0C,QAASxC,EACT5J,QAASkE,EACTtB,iBAAkByG,EAClBgD,YAAa7C,SAKvB,G,GE5PI8C,EAA2B,CAAC,EAGhC,SAASC,EAAoBC,GAE5B,IAAIC,EAAeH,EAAyBE,GAC5C,QAAqBtK,IAAjBuK,EACH,OAAOA,EAAaC,QAGrB,IAAIC,EAASL,EAAyBE,GAAY,CAGjDE,QAAS,CAAC,GAOX,OAHAE,EAAoBJ,GAAUG,EAAQA,EAAOD,QAASH,GAG/CI,EAAOD,OACf,CAGAH,EAAoBM,EAAID,E,MCzBxB,IAAIE,EAAW,GACfP,EAAoBQ,EAAI,CAACC,EAAQC,EAAUC,EAAIC,KAC9C,IAAGF,EAAH,CAMA,IAAIG,EAAeC,IACnB,IAAS/F,EAAI,EAAGA,EAAIwF,EAASrI,OAAQ6C,IAAK,CAGzC,IAFA,IAAK2F,EAAUC,EAAIC,GAAYL,EAASxF,GACpCgG,GAAY,EACPC,EAAI,EAAGA,EAAIN,EAASxI,OAAQ8I,MACpB,EAAXJ,GAAsBC,GAAgBD,IAAatQ,OAAO4M,KAAK8C,EAAoBQ,GAAGS,OAAOjD,GAASgC,EAAoBQ,EAAExC,GAAK0C,EAASM,MAC9IN,EAASlC,OAAOwC,IAAK,IAErBD,GAAY,EACTH,EAAWC,IAAcA,EAAeD,IAG7C,GAAGG,EAAW,CACbR,EAAS/B,OAAOzD,IAAK,GACrB,IAAImG,EAAIP,SACEhL,IAANuL,IAAiBT,EAASS,EAC/B,CACD,CACA,OAAOT,CAnBP,CAJCG,EAAWA,GAAY,EACvB,IAAI,IAAI7F,EAAIwF,EAASrI,OAAQ6C,EAAI,GAAKwF,EAASxF,EAAI,GAAG,GAAK6F,EAAU7F,IAAKwF,EAASxF,GAAKwF,EAASxF,EAAI,GACrGwF,EAASxF,GAAK,CAAC2F,EAAUC,EAAIC,G,KCJ/BZ,EAAoBhI,EAAKoI,IACxB,IAAIe,EAASf,GAAUA,EAAOgB,WAC7B,IAAOhB,EAAiB,QACxB,IAAM,EAEP,OADAJ,EAAoBqB,EAAEF,EAAQ,CAAE3H,EAAG2H,IAC5BA,GCLRnB,EAAoBqB,EAAI,CAAClB,EAASmB,KACjC,IAAI,IAAItD,KAAOsD,EACXtB,EAAoBuB,EAAED,EAAYtD,KAASgC,EAAoBuB,EAAEpB,EAASnC,IAC5E1N,OAAOkR,eAAerB,EAASnC,EAAK,CAAEyD,YAAY,EAAMC,IAAKJ,EAAWtD,MCJ3EgC,EAAoBuB,EAAI,CAAClJ,EAAKsJ,IAAUrR,OAAOsR,UAAUC,eAAeC,KAAKzJ,EAAKsJ,GCClF3B,EAAoBkB,EAAKf,IACH,qBAAX4B,QAA0BA,OAAOC,aAC1C1R,OAAOkR,eAAerB,EAAS4B,OAAOC,YAAa,CAAEjN,MAAO,WAE7DzE,OAAOkR,eAAerB,EAAS,aAAc,CAAEpL,OAAO,K,MCAvD,IAAIkN,EAAkB,CACrB,IAAK,GAaNjC,EAAoBQ,EAAEQ,EAAKkB,GAA0C,IAA7BD,EAAgBC,GAGxD,IAAIC,EAAuB,CAACC,EAA4BC,KACvD,IAGIpC,EAAUiC,GAHTxB,EAAU4B,EAAaC,GAAWF,EAGhBtH,EAAI,EAC3B,GAAG2F,EAAS8B,MAAMC,GAAgC,IAAxBR,EAAgBQ,KAAa,CACtD,IAAIxC,KAAYqC,EACZtC,EAAoBuB,EAAEe,EAAarC,KACrCD,EAAoBM,EAAEL,GAAYqC,EAAYrC,IAGhD,GAAGsC,EAAS,IAAI9B,EAAS8B,EAAQvC,EAClC,CAEA,IADGoC,GAA4BA,EAA2BC,GACrDtH,EAAI2F,EAASxI,OAAQ6C,IACzBmH,EAAUxB,EAAS3F,GAChBiF,EAAoBuB,EAAEU,EAAiBC,IAAYD,EAAgBC,IACrED,EAAgBC,GAAS,KAE1BD,EAAgBC,GAAW,EAE5B,OAAOlC,EAAoBQ,EAAEC,IAG1BiC,EAAqBC,KAAsB,gBAAIA,KAAsB,iBAAK,GAC9ED,EAAmB7K,QAAQsK,EAAqBS,KAAK,KAAM,IAC3DF,EAAmBvK,KAAOgK,EAAqBS,KAAK,KAAMF,EAAmBvK,KAAKyK,KAAKF,G,KC7CvF,IAAIG,EAAsB7C,EAAoBQ,OAAE7K,EAAW,CAAC,KAAK,IAAOqK,EAAoB,QAC5F6C,EAAsB7C,EAAoBQ,EAAEqC,E","sources":["components/CardCheckboxComponent.tsx","components/CardComponent.tsx","components/YourHandComponent.tsx","App.tsx","index.ts","webpack/bootstrap","webpack/runtime/chunk loaded","webpack/runtime/compat get default export","webpack/runtime/define property getters","webpack/runtime/hasOwnProperty shorthand","webpack/runtime/make namespace object","webpack/runtime/jsonp chunk loading","webpack/startup"],"sourcesContent":["import { Image } from 'expo-image';\nimport { Platform, StyleSheet, ScrollView, View, Text, TouchableOpacity, SafeAreaView, Dimensions } from 'react-native';\nimport React, { useState, useEffect } from 'react';\n\nexport default function CardCheckboxComponent({given_title, cards_to_show, changeStatus}) {\n  const [title, setTitle] = useState(given_title);\n  const [cards, setCards] = useState(cards_to_show);\n  \n  useEffect(() => {\n    setCards(cards_to_show);\n  }, [cards_to_show]);\n\n\n  \n\n  function getBackgroundColorForType(card_type) {\n    switch (card_type) {\n      case 'Red':\n        return '#FFDDDD'; // Light red\n      case 'Green':\n        return '#DDFFDD'; // Light green\n      case 'Blue':\n        return '#DDDDFF'; // Light blue\n      case 'Yellow':\n        return '#FFFFDD'; // Light yellow\n      default:\n        return '#EEEEEE'; // Default white\n    }\n  }\n  function getBackgroundColorForButton(card_type) {\n    switch (card_type) {\n      case 'Red':\n        return '#CCAAAA'; // Light red\n      case 'Green':\n        return '#AACCAA'; // Light green\n      case 'Blue':\n        return '#AAAACC'; // Light blue\n      case 'Yellow':\n        return '#CCCCAA'; // Light yellow\n      default:\n        return '#CCCCCC'; // Default white\n    }\n  }\n  \n  return (\n    <SafeAreaView style={styles.container}>\n      <View \n      >\n        <Text style={styles.title}>{title}</Text>\n        {Object.entries(cards).map(([card_type, cards_for_type]) => (\n          <View key={card_type} style={styles.cardTypeContainer}>\n            <Text style={styles.subTitle}>{card_type}</Text>\n            <View style={[\n              styles.deckContainer, \n              { backgroundColor: getBackgroundColorForType(card_type) }\n            ]}>\n            {cards_for_type.map((card, index) => (\n              <TouchableOpacity \n              key={`${card_type}-${index}`}\n              onPress={() => changeStatus(title,card, card_type)} \n              style={[\n                styles.cardBtn, \n                { backgroundColor: getBackgroundColorForButton(card_type) }\n              ]}\n            >\n              <Text style={styles.cardBtnText} numberOfLines={2} ellipsizeMode=\"tail\">\n                {card}\n              </Text>\n            </TouchableOpacity>\n              \n            ))}\n            </View>\n          </View>\n        ))}\n        <View style={styles.paddingBottom} />\n      </View>\n    </SafeAreaView>\n  );\n}\n\nconst { height } = Dimensions.get('window');\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    height: height * 0.8,\n  },\n  title: {\n    fontSize: 18,\n    fontWeight: 'bold',\n    marginBottom: 16,\n  },\n  cardTypeContainer: {\n    marginBottom: 16,\n    \n  },\n\n  subTitle: {\n    fontSize: 14,\n    fontWeight: 'bold',\n    marginTop: 12,\n    marginBottom: 8,\n  },\n  paddingBottom: {\n    height: 50, \n  },\n  titleContainer: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    gap: 8,\n  },\n  stepContainer: {\n    gap: 8,\n    marginBottom: 8,\n  },\n  deckContainer: {\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n    justifyContent: 'flex-start',\n    gap: 8, \n    padding: 5,\n    borderRadius: 4,\n    borderWidth: 4,\n    borderColor: '#fff',\n  },\n\n  cardBtn: {\n    width: 20,\n    height: 20,\n    borderRadius: 8, \n    justifyContent: 'center',\n    alignItems: 'center',\n    color: '#fff',\n    shadowOffset: { width: 0, height: 2 },\n    shadowOpacity: 0.2,\n    shadowRadius: 3,\n    elevation: 3,\n  },\n  cardBtnText: {\n    fontSize: 14,\n    color: '#fff',\n    textAlign: 'center',\n    maxWidth: '90%',\n  },\n});","import React, { useState, useEffect } from 'react';\nimport { \n  SafeAreaView, \n  View, \n  Text, \n  TouchableOpacity, \n  StyleSheet,\n  Picker\n} from 'react-native';\n\nexport default function CardComponent({ \n  idx, \n  color: col, \n  number: num, \n  probability, \n  update, \n  options,\n  resetCard \n}) {\n    const [canUpdate, setCanUpdate] = useState(false);\n    const [color, setColor] = useState(col || '');\n    const [number, setNumber] = useState(num || '');\n    const [editColor, setEditColor] = useState(col || '');\n    const [editNumber, setEditNumber] = useState(num || '');\n    \n    useEffect(() => {\n        setColor(col || '');\n        setNumber(num || '');\n        setEditColor(col || '');\n        setEditNumber(num || '');\n    }, [col, num]);\n\n    function runUpdate(idx, new_color, new_number) {\n        update(idx, new_color || \"\", new_number || \"\");  \n        setColor(new_color || '');\n        setNumber(new_number || '');\n        setCanUpdate(false);\n    }\n\n    function cancelUpdate() {\n        setEditColor(color || ''); \n        setEditNumber(number || '');\n        setCanUpdate(false);\n    }\n\n    function handleReset() {\n        resetCard(idx); \n    }\n\n    return (\n        <SafeAreaView style={styles.cardContainer}>\n            <Text style={styles.cardTitle}>Card {idx + 1}</Text>\n            <View style={styles.cardContent}>\n                {!canUpdate ? (\n                    <>\n                        <View style={styles.cardInfo}> \n                            <Text style={styles.cardText}>\n                                Likely Color: {color || 'Not determined'}\n                            </Text>\n                            <Text style={styles.cardText}>\n                                Likely Number: {number || 'Not determined'}\n                            </Text>\n                            {(color || number) && probability !== undefined && (\n                                <Text style={styles.cardText}>\n                                    Probability: {typeof probability === 'number' ? probability.toFixed(2) + '%' : 'N/A'}\n                                </Text>\n                            )}\n                        </View>\n                        <View style={styles.buttonRow}>\n                            <TouchableOpacity \n                                style={[styles.actionButton, styles.editButton]}\n                                onPress={() => setCanUpdate(true)}\n                            >\n                                <Text style={styles.buttonText}>Edit Card</Text>\n                            </TouchableOpacity>\n                            <TouchableOpacity \n                                style={[styles.actionButton, styles.resetButton]}\n                                onPress={handleReset}\n                            >\n                                <Text style={styles.buttonText}>Reset Card</Text>\n                            </TouchableOpacity>\n                        </View>\n                    </>\n                ) : (\n                    <>\n                        <View style={styles.editSection}>\n                            <View style={styles.pickerContainer}>\n                                <Text style={styles.pickerLabel}>Color</Text>\n                                <Picker\n                                    selectedValue={editColor}\n                                    style={styles.picker}\n                                    onValueChange={setEditColor}>\n                                    <Picker.Item label=\"Select color\" value=\"\" />\n                                    {options?.color?.map((col) => (\n                                        <Picker.Item key={col} label={col} value={col} />\n                                    ))}\n                                </Picker>\n                            </View>\n\n                            <View style={styles.pickerContainer}>\n                                <Text style={styles.pickerLabel}>Number</Text>\n                                <Picker\n                                    selectedValue={editNumber}\n                                    style={styles.picker}\n                                    onValueChange={setEditNumber}>\n                                    <Picker.Item label=\"Select number\" value=\"\" />\n                                    {options?.number?.map((num) => (\n                                        <Picker.Item key={num} label={String(num)} value={String(num)} />\n                                    ))}\n                                </Picker>\n                            </View>\n                        </View>\n                        <View style={styles.buttonRow}>\n                            <TouchableOpacity \n                                style={[styles.actionButton, styles.cancelButton]}\n                                onPress={cancelUpdate}\n                            >\n                                <Text style={styles.buttonText}>Cancel</Text>\n                            </TouchableOpacity>\n                            <TouchableOpacity \n                                style={[styles.actionButton, styles.saveButton]}\n                                onPress={() => runUpdate(idx, editColor, editNumber)}\n                            >\n                                <Text style={styles.buttonText}>Save</Text>\n                            </TouchableOpacity>\n                        </View>\n                    </>\n                )}\n            </View>\n        </SafeAreaView>\n    );\n}\n\nconst styles = StyleSheet.create({\n    cardContainer: {\n        backgroundColor: '#fff',\n        borderRadius: 10,\n        padding: 15,\n        margin: 10,\n        width: 250,\n        shadowColor: '#000',\n        shadowOffset: { width: 0, height: 2 },\n        shadowOpacity: 0.1,\n        shadowRadius: 4,\n        elevation: 3,\n    },\n    cardTitle: {\n        fontSize: 18,\n        fontWeight: 'bold',\n        marginBottom: 10,\n        color: '#333',\n    },\n    cardContent: {\n        marginTop: 5,\n    },\n    cardInfo: {\n        marginBottom: 15,\n    },\n    cardText: {\n        fontSize: 16,\n        marginBottom: 5,\n        color: '#555',\n    },\n    buttonRow: {\n        flexDirection: 'row',\n        justifyContent: 'space-between',\n        marginTop: 10,\n    },\n    actionButton: {\n        padding: 10,\n        borderRadius: 5,\n        alignItems: 'center',\n        minWidth: 100,\n    },\n    editButton: {\n        backgroundColor: '#4a90e2',\n    },\n    resetButton: {\n        backgroundColor: '#ffaaaa',\n        marginLeft: 10,\n    },\n    editSection: {\n        marginBottom: 15,\n    },\n    pickerContainer: {\n        marginBottom: 15,\n    },\n    pickerLabel: {\n        fontSize: 16,\n        marginBottom: 5,\n        color: '#555',\n    },\n    picker: {\n        height: 50,\n        width: '100%',\n        backgroundColor: '#f5f5f5',\n        borderRadius: 5,\n    },\n    cancelButton: {\n        backgroundColor: '#e74c3c',\n    },\n    saveButton: {\n        backgroundColor: '#2ecc71',\n    },\n    buttonText: {\n        color: 'white',\n        fontWeight: 'bold',\n    },\n});","import React, { useState, useEffect, useMemo } from 'react';\nimport { StyleSheet, View, Text, SafeAreaView, ScrollView } from 'react-native';\nimport CardComponent from './CardComponent';\n\nconst createKnowledge = () => ({ value: '', fixed: false });\n\nexport default function YourHandComponent({ deck, options, cards_per_player }) {\n    \n    const initializeCandidates = () => {\n        return Array(cards_per_player).fill().map(() => ({\n            likelyColor: '',\n            likelyNumber: '',\n            probability: 0\n        }));\n    };\n\n    const initializeKnowledge = () => {\n        return Array(cards_per_player).fill().map(() => ({\n            color: createKnowledge(),\n            number: createKnowledge()\n        }));\n    };\n\n    \n    const [candidates, setCandidates] = useState(initializeCandidates());\n    const [knowledge, setKnowledge] = useState(initializeKnowledge());\n    const [card_matrix, setMat] = useState([]);\n    \n    \n    const mat_sum = useMemo(() => \n        card_matrix.flat().reduce((sum, count) => sum + count, 0), \n        [card_matrix]\n    );\n\n    \n    useEffect(() => {\n        setCandidates(initializeCandidates());\n        setKnowledge(initializeKnowledge());\n    }, [cards_per_player]);\n\n    \n    const loadMatrixWithSum = (use_deck, opts) => {\n        const matrix = [];\n        let sum = 0;\n        \n        opts.color.forEach(color => {\n            const row = opts.number.map(number => {\n                const count = (use_deck[color] || [])\n                    .filter(n => parseInt(n) === parseInt(number)).length;\n                sum += count;\n                return count;\n            });\n            matrix.push(row);\n        });\n        \n        return [matrix, sum];\n    };\n\n    const isEmpty = (obj) => {\n        return !obj || Object.values(obj).flat().length === 0;\n    };\n\n    const add_card_knowledge = (idx, color, number, colf, numf) => {\n        let knowledge_piece = knowledge[idx];\n        let new_knowledge = [...knowledge];\n        knowledge_piece.color = {\n            value: color,\n            fixed: colf\n        }\n        knowledge_piece.number = {\n            value: number.toString(),\n            fixed: numf\n        };\n        new_knowledge[idx] = knowledge_piece;\n\n        setKnowledge(new_knowledge);\n    };\n\n    const update_option = (idx, color, number) => {\n        console.log(\"Updating card knowledge for idx:\", idx);\n        console.log(\"Color:\", color, \"Number:\", number);\n        console.log(\"Before update:\", knowledge[idx]);\n  \n        add_card_knowledge(idx, color, number, true, true);\n        console.log(\"After update:\", knowledge[idx]);\n        const newCandidates = [...candidates];\n        newCandidates[idx] = {\n            likelyColor: color,\n            likelyNumber: number,\n            probability: 100\n        };\n        setCandidates(newCandidates);\n        \n        \n        recalculateAllCandidates();\n    };\n\n    function resetCard(idx){\n        let newKnowledge = [...knowledge];\n        newKnowledge[idx] = {\n            color: createKnowledge(),\n            number: createKnowledge()\n        };\n        setKnowledge(newKnowledge);\n        \n\n        const newCandidates = [...candidates];\n        newCandidates[idx] = {\n            likelyColor: '?',\n            likelyNumber: '?',\n            probability: 0\n        };\n        setCandidates(newCandidates);\n        \n        \n        recalculateAllCandidates();\n    };\n\n    const resetAllCards = () => {\n        setCandidates(initializeCandidates());\n        setKnowledge(initializeKnowledge());\n    };\n\n    const choose_best_color = (matrix, number) => {\n        const numIndex = parseInt(number) - 1;\n        if (numIndex < 0 || numIndex >= options.number.length) return '';\n        \n        let bestColorIndex = 0;\n        let maxProb = 0;\n        \n        for (let colorIndex = 0; colorIndex < matrix.length; colorIndex++) {\n            const prob = matrix[colorIndex][numIndex] / mat_sum;\n            if (prob > maxProb) {\n                maxProb = prob;\n                bestColorIndex = colorIndex;\n            }\n        }\n        \n        return options.color[bestColorIndex] || '';\n    };\n\n    const choose_best_number = (matrix, color) => {\n        const colorIndex = options.color.indexOf(color);\n        if (colorIndex < 0 || colorIndex >= matrix.length) return { number: '', probability: 0 };\n        \n        const numbersInColor = matrix[colorIndex];\n        const maxNumIdx = numbersInColor.indexOf(Math.max(...numbersInColor));\n        \n        return {\n            number: options.number[maxNumIdx] || '',\n            probability: numbersInColor[maxNumIdx] / mat_sum\n        };\n    };\n\n    const calculateCandidate = (idx, matrix) => {\n        const knowledge_piece = knowledge[idx];\n        let new_item = {\n            likelyColor: '',\n            likelyNumber: '',\n            probability: 0\n        };\n\n        \n        if (knowledge_piece.color.fixed) {\n            new_item.likelyColor = knowledge_piece.color.value;\n        }\n        if (knowledge_piece.number.fixed) {\n            new_item.likelyNumber = knowledge_piece.number.value;\n        }\n\n        \n        if ((!knowledge_piece.color.fixed || !knowledge_piece.number.fixed) && mat_sum > 1) {\n            const colorProbs = options.color.map((color, colorIdx) => ({\n                color,\n                prob: matrix[colorIdx].reduce((a, b) => a + b, 0) / mat_sum\n            }));\n\n            const numberProbs = options.number.map((number, numIdx) => ({\n                number,\n                prob: matrix.reduce((sum, row) => sum + row[numIdx], 0) / mat_sum\n            }));\n\n            const maxColor = colorProbs.reduce((max, curr) => \n                curr.prob > max.prob ? curr : max, colorProbs[0]);\n            const maxNumber = numberProbs.reduce((max, curr) => \n                curr.prob > max.prob ? curr : max, numberProbs[0]);\n\n            if (maxColor.prob > maxNumber.prob) {\n                if (!knowledge_piece.color.fixed) new_item.likelyColor = maxColor.color;\n                if (!knowledge_piece.number.fixed) {\n                    const numObj = choose_best_number(matrix, new_item.likelyColor);\n                    new_item.likelyNumber = numObj.number;\n                }\n            } else {\n                if (!knowledge_piece.number.fixed) new_item.likelyNumber = maxNumber.number;\n                if (!knowledge_piece.color.fixed) {\n                    new_item.likelyColor = choose_best_color(matrix, new_item.likelyNumber);\n                }\n            }\n\n            const colorIdx = options.color.indexOf(new_item.likelyColor);\n            const numIdx = options.number.indexOf(new_item.likelyNumber);\n            if (colorIdx >= 0 && numIdx >= 0) {\n                new_item.probability = Math.round((matrix[colorIdx][numIdx] / mat_sum) * 100);\n            }\n        }\n\n        \n        if (knowledge_piece.color.fixed && knowledge_piece.number.fixed) {\n            new_item.probability = 100;\n        }\n\n        return new_item;\n    };\n\n    const recalculateAllCandidates = () => {\n        if (isEmpty(deck)) return;\n\n        const [newMatrix] = loadMatrixWithSum(deck, options);\n        const workingMatrix = newMatrix.map(row => [...row]); \n        \n        \n        knowledge.forEach((k, i) => {\n            if (k.color.fixed && k.number.fixed) {\n                const x = parseInt(k.number.value) - 1;\n                const y = options.color.indexOf(k.color.value);\n                if (y >= 0 && x >= 0) {\n                    workingMatrix[y][x] = Math.max(0, workingMatrix[y][x] - 1);\n                }\n            }\n        });\n\n        \n        const indexes = Array(cards_per_player).fill().map((_, i) => i);\n        const predictionMatrix = workingMatrix.map(row => [...row]);\n        \n        indexes.forEach(i => {\n            const knowledge_piece = knowledge[i];\n            \n            \n            if (knowledge_piece.color.fixed && knowledge_piece.number.fixed) {\n                return;\n            }\n            \n            \n            const tempMatrix = predictionMatrix.map(row => [...row]);\n            \n            \n            if (candidates[i].likelyColor && candidates[i].likelyNumber) {\n                const x = parseInt(candidates[i].likelyNumber) - 1;\n                const y = options.color.indexOf(candidates[i].likelyColor);\n                if (y >= 0 && x >= 0) {\n                    tempMatrix[y][x] = Math.max(0, tempMatrix[y][x] - 1);\n                }\n            }\n            \n            \n            const new_item = calculateCandidate(i, tempMatrix);\n            \n            \n            if (new_item.likelyColor && new_item.likelyNumber) {\n                const x = parseInt(new_item.likelyNumber) - 1;\n                const y = options.color.indexOf(new_item.likelyColor);\n                if (y >= 0 && x >= 0) {\n                    predictionMatrix[y][x] = Math.max(0, predictionMatrix[y][x] - 1);\n                }\n            }\n            \n            \n            setCandidates(prev => {\n                const newCandidates = [...prev];\n                newCandidates[i] = new_item;\n                return newCandidates;\n            });\n        });\n\n        setMat(newMatrix); \n    };\n\n    \n    useEffect(() => {\n        if (isEmpty(deck)) {\n            setMat([]);\n            resetAllCards();\n            return;\n        }\n\n        const [newMatrix] = loadMatrixWithSum(deck, options);\n        setMat(newMatrix);\n        recalculateAllCandidates();\n    }, [deck, options, knowledge, cards_per_player]);\n\n    return (\n        <SafeAreaView>\n            <View>\n                <Text style={styles.text}>Your Hand</Text>\n                <View style={styles.handContainer}>\n                    <ScrollView \n                        horizontal={true}\n                        showsHorizontalScrollIndicator={false}\n                        contentContainerStyle={styles.scrollContent}\n                    >\n                        {candidates.map((card, idx) => (\n                            <CardComponent \n                                key={idx}\n                                idx={idx}\n                                color={card.likelyColor}\n                                number={card.likelyNumber}\n                                probability={card.probability}\n                                update={update_option}\n                                options={options}\n                                resetCard={resetCard}\n                            />\n                        ))}\n                    </ScrollView>\n                </View>\n            </View>\n        </SafeAreaView>\n    );\n}\n\nconst styles = StyleSheet.create({\n    text: {\n        fontSize: 20,\n        fontWeight: 'bold',\n        marginBottom: 10\n    },\n    handContainer: {\n        flexDirection: 'row',\n        marginBottom: 20\n    },\n    scrollContent: {\n        paddingHorizontal: 10\n    }\n});","import { useState, useEffect } from 'react';\nimport { Platform, StyleSheet, ScrollView, TextInput, Text, View, TouchableOpacity } from 'react-native';\nimport CardCheckboxComponent from \"./components/CardCheckboxComponent\";\nimport YourHandComponent from './components/YourHandComponent';\n\nexport default function App() {\n  const [players, setPlayers] = useState(5);\n  const [cardsPerPlayer, setCardsPerPlayer] = useState(5);\n  \n  \n\n  const card_colors = ['Red', 'Green', 'Blue', 'Yellow', 'White'];\n  const card_freq = {\n    1:3,\n    2:2,\n    3:2,\n    4:2,\n    5:1\n  }\n\n  const opts = {\n    color: [...card_colors, \"?\"],\n    number: [...Object.keys(card_freq),\"?\"]\n  };\n  \n  const [current_deck, setDeck] = useState({});\n  const [cardsShown, setCardsShown] = useState({}); \n  const [matrix, setMatrix] = useState([]);\n\n\n  useEffect(() => {\n    let deck = load_deck(false);\n    let shown = load_deck(true);\n    setDeck(deck);\n    setCardsShown(shown);\n  }, [cardsPerPlayer])\n\n  function update_matrix(name, num, val){\n    const name_index = card_colors.indexOf(name);\n    let row = matrix[name_index];\n    row[num] = row[num] + val;\n    let new_matrix = [...matrix];\n    new_matrix[name_index] = row;\n    setMatrix(new_matrix);\n  }\n\n  function load_deck(empty){\n    console.log(\"Loading deck here\");\n    if(empty == false){\n      let deck = {};\n      var new_matrix = [];\n      for (let name of card_colors){\n        let color_arr = [];\n        let row = [];\n        for (let key in card_freq){\n          row.push(card_freq[key]);\n          for (let i = 0; i < card_freq[key]; i++){\n              color_arr.push(key);\n          }\n        }\n        new_matrix.push(row);\n        deck[name] = color_arr;\n      }\n      console.log(deck);\n      setMatrix(new_matrix)\n      return deck;\n    }else{\n      console.log(\"Loading empty deck\");\n      let deck = {};\n      for (let name of card_colors){\n        deck[name] = [];\n      }\n      console.log(deck);\n      return deck;\n    }\n  }\n\n  function remove(arr, x) {\n    console.log(arr);\n    let i = arr.indexOf(x);\n    if (i !== -1) {\n        arr.splice(i, 1);\n    }\n    return arr;\n  }\n  function get_index(card_name){\n    let card_type = parseInt(card_name.split(\"-\")[1]);\n    let card_num = parseInt(card_name.split(\"-\")[2]);\n    var index = 0;\n    \n    for(let i = 1; i < card_type; i++){\n      index += card_freq[i];\n    }\n    return index + card_num;\n  }\n\n  function sort_by_color(arr){\n    let new_arr = arr.sort((a, b) => {\n      return a-b;\n    });\n    return new_arr;\n  }\n\n  function swap_decks(deck1, deck2, card_type, card_name,direction){\n    console.log(`Moving the ${card_type} ${card_name} to the ${direction}`);\n    var old_cards = deck1[card_type];\n    old_cards = remove(old_cards, card_name);\n    old_cards = old_cards.sort((a, b) => {\n      return a-b;\n    });\n    var new_cards = deck2[card_type];\n    new_cards.push(card_name);\n    new_cards = new_cards.sort((a, b) => {\n      return a-b;\n    });\n    if(direction == \"Deck\"){\n      update_matrix(card_type, card_name,1);\n      setDeck({\n        ...deck2,\n        [card_type]: new_cards\n      });\n\n      setCardsShown({\n        ...deck1,\n        [card_type]: old_cards\n      });\n    }else if(direction == \"Shown\"){\n      update_matrix(card_type, card_name,1);\n      setCardsShown({\n        ...deck2,\n        [card_type]: new_cards\n      });\n      setDeck({\n        ...deck1,\n        [card_type]: old_cards\n      });\n    }\n  }\n  \n  \n  function change_status(title, card_name, card_type){\n    if(title == \"Shown\"){\n      swap_decks(cardsShown, current_deck, card_type, card_name,\"Deck\");\n    }else{\n      swap_decks(current_deck, cardsShown, card_type, card_name,\"Shown\");\n    }\n  }\n  \n\n  \n  // Handle number input changes with validation\n  const handlePlayersChange = (text) => {\n    const num = parseInt(text) || 2; // Default to 2 if invalid\n    setPlayers(Math.min(Math.max(num, 2), 5)); // Clamp between 2-5\n  };\n\n  const handleCardsPerPlayerChange = (text) => {\n    // Parse input or default to 4 if invalid\n    const num = parseInt(text) || 4;\n    \n    // Calculate theoretical maximum based on total cards (50) and player count\n    const theoreticalMax = Math.floor(50 / players);\n    \n    // Apply absolute maximum of 10 cards per player\n    const maxCards = Math.min(theoreticalMax, 10);\n    \n    // Clamp value between minimum 4 and calculated maximum\n    const clampedValue = Math.min(Math.max(num, 4), maxCards);\n    \n    // Update state with validated value\n    setCardsPerPlayer(clampedValue);\n    \n    // Optional: Show warning if hitting max limit\n    if (clampedValue === maxCards) {\n      console.warn(`Maximum cards per player reached (${maxCards}) with ${players} players`);\n    }\n  };\n  // Increment/decrement functions\n  const incrementPlayers = () => setPlayers(prev => Math.min(prev + 1, 5));\n  const decrementPlayers = () => setPlayers(prev => Math.max(prev - 1, 2));\n  const incrementCards = () => setCardsPerPlayer(prev => Math.min(prev + 1, 5));\n  const decrementCards = () => setCardsPerPlayer(prev => Math.max(prev - 1, 3));\n\n  useEffect(() => {\n    let deck = load_deck(false);\n    let shown = load_deck(true);\n    setDeck(deck);\n    setCardsShown(shown);\n  }, [cardsPerPlayer]);\n\n  // ... (keep all your existing deck management functions)\n\n  return (\n    <View style={styles.container}>\n      <Text style={styles.mainTitle}>Hanabi</Text>\n      \n      <View style={styles.settingsContainer}>\n        <View style={styles.settingRow}>\n          <Text style={styles.settingLabel}>Players:</Text>\n          <View style={styles.numberInputContainer}>\n            <TouchableOpacity onPress={decrementPlayers} style={styles.controlButton}>\n              <Text style={styles.controlText}>-</Text>\n            </TouchableOpacity>\n            <TextInput\n              style={styles.numberInput}\n              keyboardType=\"numeric\"\n              value={players.toString()}\n              onChangeText={handlePlayersChange}\n            />\n            <TouchableOpacity onPress={incrementPlayers} style={styles.controlButton}>\n              <Text style={styles.controlText}>+</Text>\n            </TouchableOpacity>\n          </View>\n        </View>\n\n        <View style={styles.settingRow}>\n          <Text style={styles.settingLabel}>Cards per Player:</Text>\n          <View style={styles.numberInputContainer}>\n            <TouchableOpacity onPress={decrementCards} style={styles.controlButton}>\n              <Text style={styles.controlText}>-</Text>\n            </TouchableOpacity>\n            <TextInput\n              style={styles.numberInput}\n              keyboardType=\"numeric\"\n              value={cardsPerPlayer.toString()}\n              onChangeText={handleCardsPerPlayerChange}\n            />\n            <TouchableOpacity onPress={incrementCards} style={styles.controlButton}>\n              <Text style={styles.controlText}>+</Text>\n            </TouchableOpacity>\n          </View>\n        </View>\n      </View>\n\n      <ScrollView\n        style={styles.scrollView}\n        contentContainerStyle={styles.scrollContent}\n        showsVerticalScrollIndicator={false}\n      >\n        <View style={styles.deckContainer}>\n          <CardCheckboxComponent given_title={\"Deck\"} cards_to_show={current_deck} changeStatus={change_status} />\n          <CardCheckboxComponent given_title={\"Shown\"} cards_to_show={cardsShown} changeStatus={change_status} />\n        </View>\n        <YourHandComponent \n          deck={current_deck} \n          discard={cardsShown} \n          options={opts} \n          cards_per_player={cardsPerPlayer} \n          frequencies={card_freq} \n        />\n      </ScrollView>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    padding: 16,\n  },\n  settingsContainer: {\n    marginBottom: 20,\n  },\n  settingRow: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    marginBottom: 10,\n  },\n  settingLabel: {\n    fontSize: 18,\n    fontWeight: 'bold',\n    marginRight: 10,\n  },\n  numberInputContainer: {\n    flexDirection: 'row',\n    alignItems: 'center',\n  },\n  numberInput: {\n    height: 40,\n    width: 50,\n    borderColor: '#ccc',\n    borderWidth: 1,\n    borderRadius: 4,\n    textAlign: 'center',\n    marginHorizontal: 5,\n  },\n  controlButton: {\n    width: 40,\n    height: 40,\n    backgroundColor: '#f0f0f0',\n    borderRadius: 20,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  controlText: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  mainTitle: {\n    fontSize: 32,\n    textAlign: 'center',\n    fontWeight: 'bold',\n    marginVertical: 16,\n  },\n  scrollView: {\n    flex: 1,\n  },\n  scrollContent: {\n    paddingBottom: 20,\n  },\n  deckContainer: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    marginBottom: 20,\n  },\n  // ... keep your other existing styles\n});","import { registerRootComponent } from 'expo';\n\nimport App from './App';\n\n// registerRootComponent calls AppRegistry.registerComponent('main', () => App);\n// It also ensures that whether you load the app in Expo Go or in a native build,\n// the environment is set up appropriately\nregisterRootComponent(App);\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","var deferred = [];\n__webpack_require__.O = (result, chunkIds, fn, priority) => {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar [chunkIds, fn, priority] = deferred[i];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t179: 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = (parentChunkLoadingFunction, data) => {\n\tvar [chunkIds, moreModules, runtime] = data;\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some((id) => (installedChunks[id] !== 0))) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunkweb\"] = self[\"webpackChunkweb\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\nvar __webpack_exports__ = __webpack_require__.O(undefined, [80], () => (__webpack_require__(3415)))\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n"],"names":["CardCheckboxComponent","given_title","cards_to_show","changeStatus","title","setTitle","useState","cards","setCards","getBackgroundColorForType","card_type","getBackgroundColorForButton","useEffect","_jsx","SafeAreaView","style","styles","container","children","_jsxs","View","Text","Object","entries","map","cards_for_type","cardTypeContainer","subTitle","deckContainer","backgroundColor","card","index","TouchableOpacity","onPress","cardBtn","cardBtnText","numberOfLines","ellipsizeMode","paddingBottom","height","Dimensions","StyleSheet","flex","fontSize","fontWeight","marginBottom","marginTop","titleContainer","flexDirection","alignItems","gap","stepContainer","flexWrap","justifyContent","padding","borderRadius","borderWidth","borderColor","width","color","shadowOffset","shadowOpacity","shadowRadius","elevation","textAlign","maxWidth","CardComponent","idx","col","number","num","probability","update","options","resetCard","canUpdate","setCanUpdate","setColor","setNumber","editColor","setEditColor","editNumber","setEditNumber","cardContainer","cardTitle","cardContent","_Fragment","editSection","pickerContainer","pickerLabel","Picker","selectedValue","picker","onValueChange","label","value","String","buttonRow","actionButton","cancelButton","buttonText","saveButton","new_color","new_number","runUpdate","cardInfo","cardText","undefined","toFixed","editButton","resetButton","margin","shadowColor","minWidth","marginLeft","YourHandComponent","deck","cards_per_player","initializeCandidates","Array","fill","likelyColor","likelyNumber","initializeKnowledge","fixed","candidates","setCandidates","knowledge","setKnowledge","card_matrix","setMat","mat_sum","useMemo","flat","reduce","sum","count","loadMatrixWithSum","use_deck","opts","matrix","forEach","row","filter","n","parseInt","length","push","isEmpty","obj","values","update_option","console","log","add_card_knowledge","colf","numf","knowledge_piece","new_knowledge","toString","newCandidates","recalculateAllCandidates","newKnowledge","calculateCandidate","new_item","colorProbs","colorIdx","prob","a","b","numberProbs","numIdx","maxColor","max","curr","maxNumber","numObj","choose_best_number","colorIndex","indexOf","numbersInColor","maxNumIdx","Math","choose_best_color","numIndex","bestColorIndex","maxProb","round","newMatrix","workingMatrix","k","i","x","y","indexes","_","predictionMatrix","tempMatrix","prev","text","handContainer","ScrollView","horizontal","showsHorizontalScrollIndicator","contentContainerStyle","scrollContent","paddingHorizontal","settingsContainer","settingRow","settingLabel","marginRight","numberInputContainer","numberInput","marginHorizontal","controlButton","controlText","mainTitle","marginVertical","scrollView","registerRootComponent","players","setPlayers","cardsPerPlayer","setCardsPerPlayer","card_colors","card_freq","keys","current_deck","setDeck","cardsShown","setCardsShown","setMatrix","update_matrix","name","val","name_index","new_matrix","load_deck","empty","color_arr","key","swap_decks","deck1","deck2","card_name","direction","old_cards","arr","splice","remove","sort","new_cards","assign","change_status","shown","decrementPlayers","TextInput","keyboardType","onChangeText","min","incrementPlayers","decrementCards","theoreticalMax","floor","maxCards","clampedValue","warn","incrementCards","showsVerticalScrollIndicator","discard","frequencies","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","__webpack_modules__","m","deferred","O","result","chunkIds","fn","priority","notFulfilled","Infinity","fulfilled","j","every","r","getter","__esModule","d","definition","o","defineProperty","enumerable","get","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","installedChunks","chunkId","webpackJsonpCallback","parentChunkLoadingFunction","data","moreModules","runtime","some","id","chunkLoadingGlobal","self","bind","__webpack_exports__"],"sourceRoot":""}